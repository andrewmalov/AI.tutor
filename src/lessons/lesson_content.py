"""
Module containing lesson content
"""

LESSONS = [
    {
        "id": 1,
        "topic": "Функции: основы",
        "theory": """
Функции в Python - это блоки кода, которые выполняются только при их вызове. Они позволяют структурировать код, избегать повторений и делать программы более читаемыми.

Функция объявляется с помощью ключевого слова `def`, за которым следует имя функции и круглые скобки. Параметры функции указываются в скобках.
        """,
        "code_example": """
def greet(name):
    # Функция приветствия
    return f"Привет, {name}!"

# Вызов функции
message = greet("Алексей")
print(message)  # Выведет: Привет, Алексей!
        """,
        "questions": [
            {
                "text": "Какое ключевое слово используется для объявления функции в Python?",
                "options": ["function", "def", "func", "define"],
                "correct_index": 1
            },
            {
                "text": "Что делает оператор return в функции?",
                "options": [
                    "Завершает выполнение функции", 
                    "Возвращает значение из функции", 
                    "Выводит результат на экран", 
                    "Создает новую функцию"
                ],
                "correct_index": 1
            }
        ]
    },
    {
        "id": 2,
        "topic": "ООП: классы и объекты",
        "theory": """
Объектно-ориентированное программирование (ООП) - это парадигма программирования, основанная на концепции "объектов". В Python всё является объектами, и мы можем создавать собственные типы объектов с помощью классов.

Класс - это шаблон для создания объектов. Он определяет атрибуты (данные) и методы (функции), которые будут иметь все объекты этого класса.
        """,
        "code_example": """
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    def bark(self):
        return f"{self.name} говорит: Гав!"

# Создание объекта класса Dog
my_dog = Dog("Бобик", 3)
print(my_dog.bark())  # Выведет: Бобик говорит: Гав!
        """,
        "questions": [
            {
                "text": "Что такое класс в Python?",
                "options": [
                    "Функция с множеством аргументов", 
                    "Шаблон для создания объектов", 
                    "Специальный тип переменной", 
                    "Модуль для импорта"
                ],
                "correct_index": 1
            },
            {
                "text": "Для чего используется метод __init__ в классе?",
                "options": [
                    "Для инициализации объекта при его создании", 
                    "Для удаления объекта", 
                    "Для преобразования объекта в строку", 
                    "Для сравнения объектов"
                ],
                "correct_index": 0
            }
        ]
    },
    {
        "id": 3,
        "topic": "Работа с файлами",
        "theory": """
Python предоставляет простые и мощные инструменты для работы с файлами. Вы можете открывать файлы для чтения, записи или добавления данных.

Функция `open()` используется для открытия файла и возвращает объект файла. После работы с файлом важно закрыть его с помощью метода `close()`.
        """,
        "code_example": """
# Запись в файл
with open('example.txt', 'w') as file:
    file.write('Привет, мир!')

# Чтение из файла
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)  # Выведет: Привет, мир!
        """,
        "questions": [
            {
                "text": "Какой режим открытия файла используется для записи?",
                "options": ["r", "w", "a", "x"],
                "correct_index": 1
            },
            {
                "text": "Что делает конструкция 'with' при работе с файлами?",
                "options": [
                    "Создает новый файл", 
                    "Автоматически закрывает файл после выхода из блока", 
                    "Удаляет файл после использования", 
                    "Шифрует содержимое файла"
                ],
                "correct_index": 1
            }
        ]
    },
    {
        "id": 4,
        "topic": "Функции: декораторы",
        "theory": """
Декораторы - это мощный инструмент в Python, который позволяет изменять поведение функций или методов. Декоратор принимает функцию в качестве аргумента, добавляет к ней новую функциональность и возвращает модифицированную функцию.

Декораторы часто используются для логирования, проверки аргументов, измерения времени выполнения и других задач, которые должны выполняться до или после основной функции.
        """,
        "code_example": """
def my_decorator(func):
    def wrapper():
        print("Что-то происходит перед вызовом функции.")
        func()
        print("Что-то происходит после вызова функции.")
    return wrapper

@my_decorator
def say_hello():
    print("Привет!")

# Вызов декорированной функции
say_hello()
# Выведет:
# Что-то происходит перед вызовом функции.
# Привет!
# Что-то происходит после вызова функции.
        """,
        "questions": [
            {
                "text": "Что такое декоратор в Python?",
                "options": [
                    "Функция, которая изменяет поведение другой функции", 
                    "Специальный комментарий в коде", 
                    "Метод для украшения вывода программы", 
                    "Класс для создания графического интерфейса"
                ],
                "correct_index": 0
            },
            {
                "text": "Какой символ используется для применения декоратора к функции?",
                "options": ["#", "@", "$", "&"],
                "correct_index": 1
            }
        ]
    },
    {
        "id": 5,
        "topic": "Обработка исключений",
        "theory": """
Исключения в Python - это события, которые возникают во время выполнения программы и нарушают нормальный поток инструкций. Когда происходит ошибка, Python создает исключение, которое можно обработать.

Для обработки исключений используются блоки try-except. Код, который может вызвать исключение, помещается в блок try, а код для обработки исключения - в блок except.
        """,
        "code_example": """
try:
    # Код, который может вызвать исключение
    number = int(input("Введите число: "))
    result = 10 / number
    print(f"Результат: {result}")
except ValueError:
    # Обработка ошибки преобразования типа
    print("Вы ввели не число!")
except ZeroDivisionError:
    # Обработка деления на ноль
    print("Деление на ноль невозможно!")
except Exception as e:
    # Обработка других исключений
    print(f"Произошла ошибка: {e}")
finally:
    # Этот блок выполнится в любом случае
    print("Завершение программы")
        """,
        "questions": [
            {
                "text": "Какой блок используется для обработки исключений в Python?",
                "options": ["if-else", "try-except", "for-in", "while-do"],
                "correct_index": 1
            },
            {
                "text": "Для чего используется блок finally в обработке исключений?",
                "options": [
                    "Для обработки всех типов исключений", 
                    "Для выполнения кода независимо от того, произошло исключение или нет", 
                    "Для завершения программы", 
                    "Для повторного выполнения блока try"
                ],
                "correct_index": 1
            }
        ]
    },
    {
        "id": 6,
        "topic": "Модули и пакеты",
        "theory": """
Модули в Python - это файлы с расширением .py, содержащие определения и инструкции Python. Модули позволяют организовать код логически, делая его более понятным и повторно используемым.

Пакеты - это способ организации модулей в иерархическую структуру каталогов. Пакет - это каталог, содержащий модули и специальный файл __init__.py.
        """,
        "code_example": """
# Импорт всего модуля
import math
print(math.sqrt(16))  # Выведет: 4.0

# Импорт конкретной функции из модуля
from random import randint
print(randint(1, 10))  # Выведет случайное число от 1 до 10

# Импорт с псевдонимом
import datetime as dt
now = dt.datetime.now()
print(now)  # Выведет текущую дату и время
        """,
        "questions": [
            {
                "text": "Как импортировать конкретную функцию из модуля?",
                "options": [
                    "import module.function", 
                    "from module import function", 
                    "using module.function", 
                    "require module.function"
                ],
                "correct_index": 1
            },
            {
                "text": "Что такое пакет в Python?",
                "options": [
                    "Архив с исходным кодом", 
                    "Библиотека функций", 
                    "Каталог с модулями и файлом __init__.py", 
                    "Компилированный модуль Python"
                ],
                "correct_index": 2
            }
        ]
    },
    {
        "id": 7,
        "topic": "Итераторы и генераторы",
        "theory": """
Итераторы - это объекты, которые можно перебирать (итерировать). Они реализуют методы __iter__() и __next__(), позволяющие последовательно получать элементы.

Генераторы - это специальный тип итераторов, которые можно создать с помощью функций с оператором yield или генераторных выражений. Они позволяют создавать итераторы более простым способом.
        """,
        "code_example": """
# Пример генераторной функции
def count_up_to(max):
    count = 1
    while count <= max:
        yield count
        count += 1

# Использование генератора
counter = count_up_to(5)
for number in counter:
    print(number)  # Выведет числа от 1 до 5

# Генераторное выражение
squares = (x**2 for x in range(1, 6))
print(list(squares))  # Выведет: [1, 4, 9, 16, 25]
        """,
        "questions": [
            {
                "text": "Что делает оператор yield в функции?",
                "options": [
                    "Возвращает значение и завершает функцию", 
                    "Возвращает значение и приостанавливает выполнение функции", 
                    "Создает новый объект", 
                    "Вызывает другую функцию"
                ],
                "correct_index": 1
            },
            {
                "text": "В чем преимущество генераторов перед списками?",
                "options": [
                    "Они работают быстрее", 
                    "Они используют меньше памяти, так как генерируют элементы по одному", 
                    "Они могут содержать больше элементов", 
                    "Они поддерживают больше методов"
                ],
                "correct_index": 1
            }
        ]
    }
]

def get_lesson_by_id(lesson_id):
    """
    Get lesson by ID
    
    Args:
        lesson_id: ID of the lesson to retrieve
        
    Returns:
        Lesson dictionary or None if not found
    """
    for lesson in LESSONS:
        if lesson["id"] == lesson_id:
            return lesson
    return None

def get_lesson_by_topic(topic):
    """
    Get lesson by topic
    
    Args:
        topic: Topic of the lesson to retrieve
        
    Returns:
        Lesson dictionary or None if not found
    """
    for lesson in LESSONS:
        if lesson["topic"] == topic:
            return lesson
    return None